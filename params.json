{"name":"LISP","body":"### LISP\r\n\r\nThe original paper on LISP, written by John McCarthy in 1960 and available [here](http://www-formal.stanford.edu/jmc/recursive.html), specifies the basic rules of Lisp in a very clear and readable way. It is almost impossible to read the paper and not get the urge to try implementing it yourself. That's what I've done in this repository.\r\n\r\n### Rationale\r\n\r\nThis is not intended to be a usable or interesting programming language. It is an exploration of the roots of Lisp. My purpose with publishing it is primarily as a homage and exercise.\r\n\r\n### eval\r\n\r\nHere is the complete `eval` function:\r\n\r\n```\r\nsexpr_t lisp_eval(Lisp I, sexpr_t e, sexpr_t env) {\r\n  static const char* squote = NULL;\r\n  static const char* scar = NULL;\r\n  static const char* scdr = NULL;\r\n  static const char* satom = NULL;\r\n  static const char* scond = NULL;\r\n  static const char* scons = NULL;\r\n  static const char* seq = NULL;\r\n  static const char* slabel = NULL;\r\n  static const char* sfn = NULL;\r\n  static const char* ssetq = NULL;\r\n\r\n  if (squote == NULL) {\r\n    squote = intern(\"quote\");\r\n    scar = intern(\"car\");\r\n    scdr = intern(\"cdr\");\r\n    satom = intern(\"atom\");\r\n    scond = intern(\"cond\");\r\n    scons = intern(\"cons\");\r\n    seq = intern(\"eq\");\r\n    slabel = intern(\"label\");\r\n    sfn = intern(\"fn\");\r\n    ssetq = intern(\"setq\");\r\n  }\r\n\r\n  if (NILP(e)) {\r\n    return &I->nil;\r\n  } else if (ATOMP(e)) {\r\n    if (ATOMTYPE(e) == T_SYMBOL) {\r\n      return lisp_assoc(I, e, env);\r\n    }\r\n    else {\r\n      return e;\r\n    }\r\n  }\r\n  else if (ATOMP(CAR(e))) {\r\n    if (ATOMTYPE(CAR(e)) == T_FUNCTION) {\r\n      I->call = e;\r\n      return ATOM2FN(CAR(e))(I, lisp_evlis(I, CDR(e), env), env);\r\n    }\r\n    else if (ATOMTYPE(CAR(e)) == T_SYMBOL) {\r\n      // todo: apply\r\n      const char* astr = ATOM2STR(CAR(e));\r\n      if (astr == squote) {\r\n        return CADR(e);\r\n      }\r\n      else if (astr == satom) {\r\n        sexpr_t ret = lisp_eval(I, CADR(e), env);\r\n        if (ATOMP(ret))\r\n          return ret;\r\n        else\r\n          return &I->nil;\r\n      }\r\n      else if (astr == seq) {\r\n        return lisp_eq(I, lisp_eval(I, CADR(e), env), lisp_eval(I, CADDR(e), env));\r\n      }\r\n      else if (astr == scond) {\r\n        sexpr_t c = CDR(e);\r\n        while (!NILP(c)) {\r\n          sexpr_t r = lisp_eval(I, CAAR(c), env);\r\n          if (!NILP(r)) {\r\n            return lisp_eval(I, CADAR(c), env);\r\n          }\r\n          else {\r\n            c = CDR(c);\r\n          }\r\n        }\r\n        printf(\"Cond error:\");\r\n        print_sexpr(I, e);\r\n        return &I->nil;\r\n      }\r\n      else if (astr == scar) {\r\n        return CAR(lisp_eval(I, CADR(e), env));\r\n      }\r\n      else if (astr == scdr) {\r\n        return CDR(lisp_eval(I, CADR(e), env));\r\n      }\r\n      else if (astr == scons) {\r\n        return lisp_cons(I, lisp_eval(I, CADR(e), env), lisp_eval(I, CADDR(e), env));\r\n      }\r\n      else if (astr == ssetq) {\r\n        sexpr_t v1 = CADR(e);\r\n        do {\r\n          I->env = lisp_cons(I, lisp_list(I, CADR(e), lisp_eval(I, CADDR(e), env)), I->env);\r\n          e = CDDR(e);\r\n        } while(!NILP(CDR(e)));\r\n        return v1;\r\n      }\r\n      else {\r\n        return lisp_eval(I, lisp_cons(I, lisp_assoc(I, CAR(e), env), CDR(e)), env);\r\n      }\r\n    }\r\n  }\r\n  else if (lisp_streq(I, CAAR(e), slabel) != &I->nil) {\r\n    return lisp_eval(I, lisp_cons(I, CADDAR(e), CDR(e)),\r\n                     lisp_cons(I, lisp_list(I, CADAR(e), CAR(e)), env));\r\n  }\r\n  else if (lisp_streq(I, CAAR(e), sfn) != &I->nil) {\r\n    return lisp_eval(I, CADDAR(e),\r\n                     lisp_append(I, lisp_pair(I, CADAR(e),\r\n                                              lisp_evlis(I, CDR(e), env)), env));\r\n  }\r\n\r\n  printf(\"Eval error:\");\r\n  print_sexpr(I, e);\r\n  return &I->nil;\r\n}\r\n```","tagline":"My attempt at implementing the original LISP paper while learning lisp. Nothing special, mostly posted as a homage to McCarthy.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}